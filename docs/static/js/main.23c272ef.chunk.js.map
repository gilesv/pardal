{"version":3,"sources":["redux/actions.ts","components/StoryListItem.tsx","entities/task.entity.ts","entities/story.entity.ts","components/StoryList.tsx","components/TaskForm.tsx","components/TaskItem.tsx","components/TaskList.tsx","components/StoryForm.tsx","redux/reducers/ui.reducer.ts","redux/utils/store.utils.ts","redux/reducers/stories.reducer.ts","redux/reducers/tasks.reducer.ts","services/trader.service.ts","redux/reducers/index.ts","redux/store.ts","components/StoryDetails.tsx","services/file.service.ts","entities/notification.entity.ts","components/NotifyDock.tsx","components/Dashboard.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","StoryListItem","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","storyId","selectStory","_this","_this$props","story","removeStory","isSelected","react_default","a","createElement","className","concat","onClick","e","handleClick","id","name","tasks","length","React","Component","addStory","type","ADD_USER_STORY","payload","updateStory","UPDATE_USER_STORY","addTask","task","ADD_TASK","TaskType","TaskArea","Story","title","article","actor","verb","action","predicate","motivation","priority","effort","startDate","handOffDate","description","Date","StoryList","fileSelector","createRef","bind","assertThisInitialized","clickFileSelector","storiesIds","generateNewName","dispatch","counter","storyExists","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","stories","err","return","REMOVE_USER_STORY","storyIndex","index","indexOf","SELECT_STORY","el","current","click","_this2","selectedStory","importStory","addStoryMenu","menu","Item","text","icon","ref","onChange","accept","buttonGroup","buttons","intent","popover","content","position","Position","BOTTOM_RIGHT","minimal","rightIcon","map","StoryListItem_StoryListItem","key","nonIdealState","connect","state","objectSpread","entities","ids","ui","Assignee","A1","A2","A3","A4","A5","Task","area","assignee","TASK","BOTH","TaskForm","update","updateEffort","formGroup","label","inline","inputGroup","target","placeholder","fill","htmlSelect","options","values","currentTarget","numericInput","allowNumericCharactersOnly","min","buttonPosition","onValueChange","n","s","max","dateInput","newDate","formatDate","date","toLocaleDateString","parseDate","str","inputProps","leftIcon","ENH","TEST","FE","BE","textArea","growVertically","TaskItem","isBodyVisible","handleHeaderClick","setState","updated","defineProperty","updateTask","String","Number","replace","tag","collapse","isOpen","components_TaskForm","TaskList","arguments","tasksIds","UPDATE_TASK","addItemMenu","taskId","TaskItem_TaskItem","StoryForm","setStateDirty","isDirty","setStateClean","removeFromObject","obj","prop","clone","removeFromArray","arr","toConsumableArray","splice","addTaskToStory","FileType","removeTask","combineReducers","SET_STATE_CLEAN","isNaN","REMOVE_TASK","createStore","rootReducer","trader_service","Trader","store","to","getState","JSON","exportStoryToJSON","DTD","exportStoryToDTD","Error","stringify","dtdContent","storyToDTDFormat","taskToDTDFormat","descriptionToTopics","join","storyName","result","lines","split","l","trim","filter","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","line","includes","source","from","toObjectTree","nextStoryId","importStoryToStore","importTasksToStore","message","storyObj","nextId","dateStr","parse","tasksArray","newTasks","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","taskObj","push","_i","_newTasks","StoryDetails","editableNameElement","updateAttribute","blur","exportMenu","exportStory","Fragment","react_contenteditable_default","innerRef","updateStoryName","onKeyDown","handleEnterKeyOnStoryName","html","components_StoryForm","components_TaskList","selectedStoryIndex","Extension","_Extension","download","fileName","fileType","bytes","blob","filename","link","document","url","window","URL","createObjectURL","href","body","appendChild","remove","revokeObjectURL","clickOnVirtualLink","Blob","Notification","timeout","NotifyDock","Toaster","create","TOP","Dashboard","isStateDirty","onbeforeunload","notification","show","notify","setTimeout","file","files","reader","FileReader","onload","readAsText","components_StoryList","components_StoryDetails","Boolean","location","hostname","match","ReactDOM","render","es","components_Dashboard","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23c272ef.chunk.js","sourcesContent":["import { Sprint, SprintId } from \"../entities/sprint.entity\";\nimport { Team, TeamId } from \"../entities/team.entity\";\nimport { TeamMember, TeamMemberId } from \"../entities/team-member.entity\";\nimport IAction from \"./utils/action.interface\";\nimport { Story, StoryId } from \"../entities/story.entity\";\nimport { Task, TaskId } from \"../entities/task.entity\";\n\nexport enum ActionType {\n  // UI\n  SELECT_STORY,\n  SET_STATE_CLEAN,\n\n  // Team\n  ADD_TEAM,\n  UPDATE_TEAM,\n  REMOVE_TEAM,\n\n  // Team Member\n  ADD_TEAM_MEMBER,\n  UPDATE_TEAM_MEMBER,\n  REMOVE_TEAM_MEMBER,\n\n  // Sprint\n  ADD_SPRINT,\n  UPDATE_SPRINT,\n  REMOVE_SPRINT,\n\n  // User Story\n  ADD_USER_STORY,\n  UPDATE_USER_STORY,\n  REMOVE_USER_STORY,\n\n  // TASK\n  ADD_TASK,\n  UPDATE_TASK,\n  REMOVE_TASK\n}\n\n/**\n * ============================================\n * Actions for UI\n * ============================================\n */\n\nexport function selectStory(storyIndex: number): IAction {\n  return {\n    type: ActionType.SELECT_STORY,\n    payload: { storyIndex }\n  };\n}\n\nexport function setStateClean(): IAction {\n  return { type: ActionType.SET_STATE_CLEAN, payload: {} };\n}\n\n/**\n * ============================================\n * Actions for Team\n * ============================================\n */\nfunction addTeam(team: Team): IAction {\n  return {\n    type: ActionType.ADD_TEAM,\n    payload: { team }\n  };\n}\n\nfunction updateTeam(team: Team): IAction {\n  return {\n    type: ActionType.UPDATE_TEAM,\n    payload: { team }\n  }\n}\n\nfunction removeTeam(teamId: TeamId): IAction {\n  return {\n    type: ActionType.REMOVE_TEAM,\n    payload: { teamId }\n  };\n}\n\n/**\n * ============================================\n * Actions for Team Member\n * ============================================\n */\nfunction addTeamMember(teamId: TeamId, teamMember: TeamMember): IAction {\n  return {\n    type: ActionType.ADD_TEAM_MEMBER,\n    payload: { teamId, teamMember }\n  };\n}\n\nfunction updateTeamMember(teamId: TeamId, teamMember: TeamMember): IAction {\n  return {\n    type: ActionType.ADD_TEAM_MEMBER,\n    payload: { teamId, teamMember }\n  };\n}\n\nfunction removeTeamMember(teamId: TeamId, teamMemberId: TeamMemberId): IAction {\n  return {\n    type: ActionType.ADD_TEAM_MEMBER,\n    payload: { teamId, teamMemberId }\n  };\n}\n\n/**\n * ============================================\n * Actions for Sprint\n * ============================================\n */\nexport function addSprint(sprint: Sprint): IAction {\n  return {\n    type: ActionType.ADD_SPRINT,\n    payload: { sprint }\n  };\n}\n\nexport function updateSprint(sprint: Sprint): IAction {\n  return {\n    type: ActionType.UPDATE_SPRINT,\n    payload: { sprint }\n  };\n}\n\nexport function removeSprint(sprintId?: SprintId): IAction {\n  return {\n    type: ActionType.REMOVE_SPRINT,\n    payload: { sprintId }\n  };\n}\n\n/**\n * ============================================\n * Actions for UserStory\n * ============================================\n */\nexport function addStory(story: Story): IAction {\n  return {\n    type: ActionType.ADD_USER_STORY,\n    payload: { story }\n  };\n}\n\nexport function updateStory(story: Story): IAction {\n  return {\n    type: ActionType.UPDATE_USER_STORY,\n    payload: { story }\n  };\n}\n\nexport function removeStory(storyId?: StoryId): IAction {\n  return {\n    type: ActionType.REMOVE_USER_STORY,\n    payload: { storyId }\n  };\n}\n\n/**\n * ============================================\n * Actions for Task\n * ============================================\n */\nexport function addTask(task: Task, storyId: StoryId): IAction {\n  return {\n    type: ActionType.ADD_TASK,\n    payload: { task, storyId }\n  };\n}\n\nexport function updateTask(task: Task): IAction {\n  return {\n    type: ActionType.UPDATE_TASK,\n    payload: { task }\n  };\n}\n\nexport function removeTask(taskId: TaskId): IAction {\n  return {\n    type: ActionType.REMOVE_TASK,\n    payload: { taskId }\n  };\n}","import React from \"react\";\nimport { Story, StoryId } from \"../entities/story.entity\";\n\ninterface Props {\n  story: Story,\n  isSelected: boolean,\n  selectStory: (storyId: StoryId) => void,\n  removeStory: (storyId: StoryId) => void\n}\n\nexport default class StoryListItem extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  handleClick(storyId: StoryId) {\n    this.props.selectStory(storyId);\n  }\n\n  render() {\n    const { story, removeStory, isSelected } = this.props;\n    return (\n      <div className={`story-list-item ${isSelected ? \"selected\" : \"\"}`} onClick={(e) => this.handleClick(story.id)}>\n        <div className=\"story-item__name\">\n          {story.name}\n        </div>\n\n        <div className={`story-list-item__delete`} onClick={(e) => removeStory(story.id)}>\n        </div>\n\n        <div className={`story-list-item__items-count`}>\n          {`${story.tasks ? story.tasks.length : \"No\"} items`}\n        </div>\n      </div>\n    );\n  }\n}\n","export type TaskId = number;\n\nexport enum TaskType {\n  TASK = \"TASK\",\n  ENH = \"ENH\",\n  BUG = \"BUG\",\n  TEST = \"TEST\"\n};\n\nexport enum TaskArea {\n  BE = \"BE\",\n  FE = \"FE\",\n  BOTH = \"BE & FE\"\n}\n\nexport const Assignee = {\n  \"A1\": \"A1\",\n  \"A2\": \"A2\",\n  \"A3\": \"A3\",\n  \"A4\": \"A4\",\n  \"A5\": \"A5\"\n}\n\nexport class Task {\n  constructor(id: TaskId, type?: TaskType) {\n    this.id = id;\n    this.type = type || TaskType.TASK;\n    this.title = \"New item\";\n    this.priority = 1.0;\n    this.effort = \"1.0\";\n    this.startDate = new Date();\n    this.handOffDate = new Date();\n    this.area = TaskArea.BOTH;\n    this.description = \"\";\n    this.assignee = Assignee.A1\n  }\n\n  public id: TaskId;\n  public title: string;\n  public type: TaskType;\n  public priority: number;\n  public effort: number | string;\n  public startDate: Date;\n  public handOffDate: Date;\n  public description: string;\n  public area: TaskArea;\n  public assignee: string;\n}\n","import { TaskId } from \"./task.entity\";\n\nexport type StoryId = number;\n\nexport class Story {\n  constructor(id: StoryId, name: string) {\n    this.id = id;\n    this.name = name || \"New Story\";\n    this.title = \"\";\n\n    this.article = \"As a\";\n    this.actor = \"User\";\n    this.verb = \"I want to\";\n    this.action = \"do something\";\n    this.predicate = \"so I can\";\n    this.motivation = \"accomplish something else\"\n\n    this.priority = 1.0;\n    this.effort = 1.0;\n    this.startDate = new Date();\n    this.handOffDate = new Date();\n    this.description = \"\";\n    this.tasks = [];\n  }\n\n  public id: StoryId;\n  public name: string;\n  public title: string;\n  public article: string;\n  public actor: string;\n  public verb: string;\n  public action: string;\n  public predicate: string;\n  public motivation: string;\n  public priority: number;\n  public effort: number;\n  public startDate: Date;\n  public handOffDate: Date;\n  public description: string;\n  public tasks: TaskId[];\n}\n","import React, { SyntheticEvent } from \"react\";\nimport StoryListItem from \"./StoryListItem\";\nimport { addStory, removeStory, selectStory } from \"../redux/actions\";\nimport { Button, NonIdealState, Menu, ButtonGroup, Popover, Position } from \"@blueprintjs/core\";\nimport { connect } from \"react-redux\";\nimport { IStore } from \"../redux/reducers\";\nimport { Story, StoryId } from \"../entities/story.entity\";\n\ninterface Props {\n  story: { [key: number]: Story },\n  storiesIds: StoryId[],\n  deleteStory: () => void,\n  selectedStory: StoryId,\n  [key: string]: any\n};\n\nclass StoryList extends React.Component<Props> {\n  public fileSelector: React.RefObject<HTMLInputElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.fileSelector = React.createRef();\n    this.addStory = this.addStory.bind(this);\n    this.clickFileSelector = this.clickFileSelector.bind(this);\n  }\n\n  public addStory() {\n    const id = this.props.storiesIds.length;\n    const story = new Story(id, this.generateNewName());\n    this.props.dispatch(addStory(story));\n  }\n\n  private generateNewName(): string {\n    const defaultName = \"New Story\";\n    let name = `${defaultName} 1`;\n    let counter = 1;\n\n    while (this.storyExists(name)) {\n      name = `${defaultName} ${counter++}`;\n    }\n\n    return name;\n  }\n\n  private storyExists(name: string): boolean {\n    for (let id of this.props.storiesIds) {\n      if (this.props.stories[id].name === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public removeStory(storyId: StoryId) {\n    this.props.dispatch(removeStory(storyId));\n  }\n\n  public selectStory(storyId: StoryId) {\n    const index = this.props.storiesIds.indexOf(storyId || 0);\n    this.props.dispatch(selectStory(index));\n  }\n\n  public clickFileSelector() {\n    const el = this.fileSelector.current;\n    if (el) {\n      el.value = \"\";\n      el.click();\n    }\n  }\n\n  render() {\n    const { storiesIds, selectedStory, importStory } = this.props;\n\n    const addStoryMenu = (\n      <Menu>\n        <Menu.Item text=\"New\" icon=\"plus\" onClick={this.addStory} />\n        <Menu.Item text=\"Import from JSON...\" icon=\"import\" onClick={this.clickFileSelector} />\n      </Menu>\n    );\n\n    return (\n      <div className=\"story-list\">\n\n        <input\n          className=\"story-list__file-selector\"\n          type=\"file\"\n          ref={this.fileSelector}\n          onChange={(e) => importStory(e)}\n          accept=\".json, application/json\" />\n\n        <div className=\"story-list__header\">\n          <h1>Stories</h1>\n          <ButtonGroup>\n            <Button text=\"Add Story\" icon=\"cube-add\" intent=\"success\" onClick={this.addStory} />\n            <Popover content={addStoryMenu} position={Position.BOTTOM_RIGHT} minimal={true}>\n              <Button intent=\"success\" rightIcon=\"caret-down\" />\n            </Popover>\n          </ButtonGroup>\n        </div>\n\n        <div className=\"story-list__body\">\n          {\n            storiesIds && storiesIds.length > 0 ?\n              storiesIds.map((storyId, index) => {\n                const story: Story = this.props.stories[storyId];\n                return <StoryListItem\n                  story={story}\n                  key={`story#${storyId}`}\n                  isSelected={selectedStory === index}\n                  selectStory={(storyId: StoryId) => this.selectStory(storyId)}\n                  removeStory={(storyId: StoryId) => this.removeStory(storyId)} />\n              }) : <NonIdealState\n                className=\"story-list__no-items\"\n                title=\"Nothing here 😴\"\n                description=\"Add stories to start!\"\n                icon=\"add-to-artifact\" />\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IStore, props: any): Props => {\n  return {\n    stories: state.stories.entities,\n    storiesIds: state.stories.ids,\n    selectedStory: state.ui.selectedStory,\n    ...props\n  };\n}\n\nexport default connect(mapStateToProps)(StoryList);\n","import React from \"react\";\nimport { FormGroup, InputGroup, NumericInput, TextArea, HTMLSelect } from \"@blueprintjs/core\";\nimport { DateInput } from \"@blueprintjs/datetime\";\nimport { Task, TaskType, TaskArea, Assignee } from \"../entities/task.entity\";\n\ninterface Props {\n  task: Task,\n  update: (key: string, value: any) => void,\n  updateEffort: (n: number, s: string) => void\n}\n\nconst TaskForm = (props: Props) => {\n  const { task, update, updateEffort } = props;\n\n  return (\n    <div className=\"task-form\">\n\n      <FormGroup label=\"Title\" inline={true} className=\"title\">\n        <InputGroup\n          onChange={(e: any) => update('title', e.target.value)}\n          value={task.title}\n          placeholder=\"Insert a title...\"\n          fill={true} />\n      </FormGroup>\n\n      <div className=\"task-form__row\">\n        <FormGroup label=\"Assignee\">\n          <HTMLSelect\n            options={Object.values(Assignee)}\n            onChange={(e) => update('assignee', e.currentTarget.value)}\n            value={task.assignee} />\n        </FormGroup>\n\n        <FormGroup label=\"Effort\">\n          <NumericInput\n            allowNumericCharactersOnly={false}\n            min={0.1}\n            value={task.effort}\n            buttonPosition={\"none\"}\n            onValueChange={(n, s) => updateEffort(n, s)} />\n        </FormGroup>\n\n        <FormGroup label=\"Priority\">\n          <NumericInput value={task.priority} max={5.0} min={1.0} onValueChange={(n) => update('priority', n)} />\n        </FormGroup>\n\n        <FormGroup label=\"Kick-start date\">\n          <DateInput\n            onChange={(newDate) => update('startDate', newDate)}\n            value={task.startDate}\n            formatDate={date => date.toLocaleDateString()}\n            parseDate={str => new Date(str)}\n            placeholder=\"M/D/YYYY\"\n            inputProps={{ leftIcon: \"calendar\" }} />\n        </FormGroup>\n\n        <FormGroup label=\"Hand-off date\">\n          <DateInput\n            onChange={(newDate) => update('handOffDate', newDate)}\n            value={task.handOffDate}\n            formatDate={date => date.toLocaleDateString()}\n            parseDate={str => new Date(str)}\n            placeholder=\"M/D/YYYY\"\n            inputProps={{ leftIcon: \"calendar\" }} />\n        </FormGroup>\n\n        <FormGroup label=\"Type\">\n          <HTMLSelect\n            options={[{ label: \"Task\", value: TaskType.TASK }, { label: \"Enhancement\", value: TaskType.ENH }, { label: \"Test\", value: TaskType.TEST }]}\n            onChange={(e) => update('type', e.currentTarget.value)}\n            value={task.type} />\n        </FormGroup>\n\n        {\n          task.type !== TaskType.TEST ?\n            <FormGroup label=\"Area\">\n              <HTMLSelect\n                options={[{ label: \"Frontend\", value: TaskArea.FE }, { label: \"Backend\", value: TaskArea.BE }, { label: \"FE & BE\", value: TaskArea.BOTH }]}\n                onChange={(e) => update('area', e.currentTarget.value)}\n                value={task.area} />\n            </FormGroup> : null\n        }\n      </div>\n\n      <FormGroup label=\"Description\">\n        <TextArea\n          growVertically={false}\n          fill={true}\n          onChange={(e) => update('description', e.target.value)}\n          value={task.description}\n          placeholder=\"Describe this item...\" />\n      </FormGroup>\n\n    </div>\n  );\n}\n\nexport default TaskForm;\n","import React from \"react\";\nimport { Task } from \"../entities/task.entity\";\nimport TaskForm from \"./TaskForm\";\nimport { Collapse, Tag } from \"@blueprintjs/core\";\n\ninterface Props {\n  task: Task,\n  updateTask: (task: Task) => void\n}\n\nexport default class TaskItem extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.update = this.update.bind(this);\n    this.updateEffort = this.updateEffort.bind(this);\n    this.handleHeaderClick = this.handleHeaderClick.bind(this);\n  }\n\n  public state = {\n    isBodyVisible: true\n  }\n\n  handleHeaderClick() {\n    this.setState({\n      ...this.state,\n      isBodyVisible: !this.state.isBodyVisible\n    });\n  }\n\n  update(key: string, value: any) {\n    const updated = { ...this.props.task, [key]: value };\n    this.props.updateTask(updated);\n  }\n\n  updateEffort(n: number, s: string) {\n    let value = String(Number(s.replace(\".\", \"\")) / 10);\n\n    if (value.length === 1) {\n      value += \".0\";\n    }\n\n    if (Number(value) < 10) {\n      this.update('effort', value);\n    }\n  }\n\n  render() {\n    const { task } = this.props;\n\n    return (\n      <div className=\"task-item\">\n        <div className=\"task-item__header\" onClick={this.handleHeaderClick}>\n          <div className=\"task-item__tags\">\n            <Tag intent=\"primary\" minimal={true}>{task.type}</Tag>\n            <Tag intent=\"primary\" minimal={true}>{task.area}</Tag>\n            <Tag intent=\"primary\" minimal={true}>{task.assignee}</Tag>\n          </div>\n\n          <div className=\"task-item__title\">{task.title}</div>\n        </div>\n\n        <Collapse isOpen={this.state.isBodyVisible}>\n          <div className=\"task-item__body\">\n            <TaskForm task={task} update={this.update} updateEffort={this.updateEffort} />\n          </div>\n        </Collapse>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Story } from \"../entities/story.entity\";\nimport { connect } from \"react-redux\";\nimport { IStore } from \"../redux/reducers\";\nimport { Task, TaskId, TaskType } from \"../entities/task.entity\";\nimport TaskItem from \"./TaskItem\";\nimport { NonIdealState, Button, Popover, Position, ButtonGroup, Menu } from \"@blueprintjs/core\";\nimport { addTask, updateTask } from \"../redux/actions\";\n\ninterface Props {\n  tasks: { [key: number]: Task },\n  tasksIds: TaskId[],\n  story: Story,\n  [key: string]: any\n}\n\nclass TaskList extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.addTask = this.addTask.bind(this);\n    this.updateTask = this.updateTask.bind(this);\n  }\n\n  public addTask(type = TaskType.TASK) {\n    const id = this.props.tasksIds.length;\n    const task = new Task(id, type);\n    this.props.dispatch(addTask(task, this.props.story.id));\n  }\n\n  public updateTask(task: Task) {\n    this.props.dispatch(updateTask(task));\n  }\n\n  render() {\n    const { story } = this.props;\n    const addItemMenu = (\n      <Menu>\n        <Menu.Item text=\"Task\" onClick={() => this.addTask()} />\n        <Menu.Item text=\"Enhancement\" onClick={() => this.addTask(TaskType.ENH)} />\n        <Menu.Item text=\"Test\" onClick={() => this.addTask(TaskType.TEST)} />\n      </Menu>\n    );\n    return (\n      <div className=\"task-list\">\n        <div className=\"task-list__header\">\n          {\n            story && story.tasks.length > 0 ?\n              <ButtonGroup>\n                <Button intent=\"success\" text=\"Add item\" icon=\"add-to-artifact\" onClick={() => this.addTask()} />\n\n                <Popover content={addItemMenu} position={Position.BOTTOM_RIGHT} minimal={true}>\n                  <Button intent=\"success\" rightIcon=\"caret-down\" />\n                </Popover>\n\n              </ButtonGroup>\n              : null\n          }\n        </div>\n        {\n          story && story.tasks && story.tasks.length > 0 ?\n            story.tasks.map(taskId => {\n              const task = this.props.tasks[taskId];\n              return <TaskItem key={`task#${taskId}`} task={task} updateTask={this.updateTask} />\n            })\n            : <NonIdealState\n              className=\"story-details__nothing\"\n              title=\"No tasks here 😴 (yet)\"\n              icon=\"add\"\n              action={<Button intent=\"success\" text=\"Add a task\" icon=\"add-to-artifact\" onClick={() => this.addTask()} />} />\n        }\n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state: IStore, props: any): Props => {\n  return {\n    tasks: state.tasks.entities,\n    tasksIds: state.tasks.ids,\n    ...props\n  };\n}\n\nexport default connect(mapStateToProps)(TaskList);\n","import React from \"react\";\nimport { FormGroup, InputGroup, NumericInput, TextArea } from \"@blueprintjs/core\";\nimport { DateInput } from \"@blueprintjs/datetime\";\nimport { Story } from \"../entities/story.entity\";\n\ninterface Props {\n  story: Story,\n  update: (key: string, value: any) => void\n}\n\nconst StoryForm = (props: Props) => {\n  const { story, update } = props;\n\n  return (\n    <div className=\"story-form\">\n\n      <FormGroup label=\"Title\">\n        <InputGroup\n          onChange={(e: any) => update('title', e.target.value)}\n          value={story.title}\n          placeholder=\"Insert a title...\"\n          fill={true} />\n      </FormGroup>\n\n      <div className=\"story-form__row\">\n        <FormGroup label=\"Priority\">\n          <NumericInput id=\"priority\" value={story.priority} max={5.0} min={1.0} onValueChange={(n) => update('priority', n)} />\n        </FormGroup>\n\n        <FormGroup label=\"Effort\">\n          <NumericInput id=\"effort\" value={story.effort} max={100.0} min={1.0} onValueChange={(n) => update('effort', n)} />\n        </FormGroup>\n\n        <FormGroup label=\"Kick-start date\">\n          <DateInput\n            onChange={(newDate) => update('startDate', newDate)}\n            value={story.startDate}\n            formatDate={date => date.toLocaleDateString()}\n            parseDate={str => new Date(str)}\n            placeholder=\"M/D/YYYY\"\n            inputProps={{ leftIcon: \"calendar\" }} />\n        </FormGroup>\n\n        <FormGroup label=\"Hand-off date\">\n          <DateInput\n            onChange={(newDate) => update('handOffDate', newDate)}\n            value={story.handOffDate}\n            formatDate={date => date.toLocaleDateString()}\n            parseDate={str => new Date(str)}\n            placeholder=\"M/D/YYYY\"\n            inputProps={{ leftIcon: \"calendar\" }} />\n        </FormGroup>\n      </div>\n\n      <FormGroup label=\"Description\">\n        <TextArea\n          growVertically={false}\n          fill={true}\n          onChange={(e) => update('description', e.target.value)}\n          value={story.description}\n          placeholder=\"Describe this item...\" />\n      </FormGroup>\n\n    </div>\n  );\n}\n\nexport default StoryForm;\n","import { ActionType } from \"../actions\";\nimport IAction from \"../utils/action.interface\";\nimport IUiState from \"../utils/ui-state.interface\";\n\nexport default function uiReducer(\n  state: IUiState = { selectedStory: 0, isDirty: false },\n  action: IAction\n) {\n  switch (action.type) {\n    case ActionType.SELECT_STORY:\n      return selectStory(state, action.payload);\n\n    case ActionType.SET_STATE_CLEAN:\n      return setStateClean(state);\n\n    default:\n      return isNaN(action.type) ? state : setStateDirty(state);\n  }\n}\n\nconst selectStory = (state: IUiState, payload: any) => {\n  const { storyIndex } = payload;\n  return {\n    ...state,\n    selectedStory: storyIndex\n  };\n}\n\n/**\n * Any other action must force the application into a `dirty` state,\n * so it will display a confirm alert if the tab is closed or reloaded.\n * Only `SET_STATE_CLEAN` can undo it\n */\nconst setStateDirty = (state: IUiState) => {\n  return !state.isDirty ? { ...state, isDirty: true } : state;\n}\n\nconst setStateClean = (state: IUiState) => {\n  return state.isDirty ? { ...state, isDirty: false } : state\n}\n","\nexport const removeFromObject = (obj: any, prop: number | string): any => {\n  let clone = { ...obj };\n  delete clone[prop];\n  return clone;\n}\n\nexport const removeFromArray = (arr: any[], el: number | string): any => {\n  let clone = [...arr];\n  clone.splice(clone.indexOf(el), 1);\n  return clone;\n}\n","import { ActionType } from \"../actions\";\nimport IEntityMap from \"../utils/entity-map.interface\";\nimport IAction from \"../utils/action.interface\";\nimport { removeFromArray, removeFromObject } from \"../utils/store.utils\";\nimport { Story } from \"../../entities/story.entity\";\n\nexport default function storiesReducer(\n  state: IEntityMap<Story> = { entities: {}, ids: [] },\n  action: IAction\n) {\n  switch (action.type) {\n    case ActionType.ADD_USER_STORY:\n      return addStory(state, action.payload);\n\n    case ActionType.UPDATE_USER_STORY:\n      return updateStory(state, action.payload);\n\n    case ActionType.REMOVE_USER_STORY:\n      return removeStory(state, action.payload);\n\n    case ActionType.ADD_TASK:\n      return addTaskToStory(state, action.payload);\n\n    default:\n      return state;\n  }\n}\n\nconst addStory = (state: IEntityMap<Story>, payload: any) => {\n  const { story } = payload;\n\n  return {\n    ...state,\n    entities: {\n      ...state.entities,\n      [story.id]: story,\n    },\n    ids: [...state.ids, story.id]\n  }\n}\n\nconst updateStory = (state: IEntityMap<Story>, payload: any) => {\n  const { story } = payload;\n\n  return {\n    ...state,\n    entities: {\n      ...state.entities,\n      [story.id]: story\n    },\n  }\n}\n\nconst removeStory = (state: IEntityMap<Story>, payload: any) => {\n  const { storyId } = payload;\n\n  return {\n    ...state,\n    entities: removeFromObject(state.entities, storyId),\n    ids: removeFromArray(state.ids, storyId)\n  };\n}\n\nconst addTaskToStory = (state: IEntityMap<Story>, payload: any) => {\n  const { task, storyId } = payload;\n  const story = state.entities[storyId];\n  story.tasks = story.tasks.concat(task.id);\n\n  return {\n    ...state,\n    entities: {\n      ...state.entities,\n      [storyId]: story\n    },\n  };\n}\n","import { ActionType } from \"../actions\";\nimport IEntityMap from \"../utils/entity-map.interface\";\nimport IAction from \"../utils/action.interface\";\nimport { removeFromArray, removeFromObject } from \"../utils/store.utils\";\nimport { Task } from \"../../entities/task.entity\";\n\nexport default function tasksReducer(\n  state: IEntityMap<Task> = { entities: {}, ids: [] },\n  action: IAction\n) {\n  switch (action.type) {\n    case ActionType.ADD_TASK:\n      return addTask(state, action.payload);\n\n    case ActionType.UPDATE_TASK:\n      return updateTask(state, action.payload);\n\n    case ActionType.REMOVE_TASK:\n      return removeTask(state, action.payload);\n\n    default:\n      return state;\n  }\n}\n\nconst addTask = (state: IEntityMap<Task>, payload: any) => {\n  const { task } = payload;\n  return {\n    ...state,\n    entities: {\n      ...state.entities,\n      [task.id]: task,\n    },\n    ids: [...state.ids, task.id]\n  }\n}\n\nconst updateTask = (state: IEntityMap<Task>, payload: any) => {\n  const { task } = payload;\n\n  return {\n    ...state,\n    entities: {\n      ...state.entities,\n      [task.id]: task\n    },\n  }\n}\n\nconst removeTask = (state: IEntityMap<Task>, payload: any) => {\n  const { taskId } = payload;\n\n  return {\n    ...state,\n    entities: removeFromObject(state.entities, taskId),\n    ids: removeFromArray(state.ids, taskId)\n  };\n}\n","import { Story, StoryId } from \"../entities/story.entity\";\nimport { IStore } from \"../redux/reducers\";\nimport store from \"../redux/store\";\nimport { TaskId, Task, TaskArea } from \"../entities/task.entity\";\nimport { addStory, addTask } from \"../redux/actions\";\n\nexport enum FileType {\n  JSON,\n  DTD\n}\n\nclass Trader {\n  public store: any;\n\n  constructor(store: any) {\n    this.store = store;\n  }\n  exportStory(story: Story, to: FileType): string {\n    const state = this.store.getState();\n\n    switch (to) {\n      case FileType.JSON:\n        return this.exportStoryToJSON(story, state);\n        break;\n\n      case FileType.DTD:\n        return this.exportStoryToDTD(story, state);\n        break;\n\n      default:\n        throw new Error(\"Invalid export file type\");\n    }\n  }\n\n  private exportStoryToJSON(story: Story, state: IStore) {\n    return JSON.stringify({\n      story: {\n        ...story,\n        tasks: story.tasks.map(taskId => state.tasks.entities[taskId])\n      }\n    }, null, 3);\n  }\n\n  private exportStoryToDTD(story: Story, state: IStore) {\n    const tasks = story.tasks.map(taskId => state.tasks.entities[taskId]);\n    let dtdContent = this.storyToDTDFormat(story);\n\n    for (let task of tasks) {\n      dtdContent += \"\\n\" + this.taskToDTDFormat(task, story.name);\n    }\n\n    return dtdContent;\n  }\n\n  private storyToDTDFormat(story: Story): string {\n    return [\n      `[STORY][${story.name}] ${story.title}`,\n      `[PRIORITY]: ${story.priority}`,\n      `[EFFORT]: ${story.effort}`,\n      `[DESCRIPTION]:\\n${this.descriptionToTopics(story.description)}`\n    ].join(\"\\n\");\n  }\n\n  private taskToDTDFormat(task: Task, storyName: string): string {\n    return [\n      `[${task.type}][${storyName}][${task.area === TaskArea.BOTH ? 'BE][FE' : task.area}][${task.assignee}] ${task.title}`,\n      `[PRIORITY]: ${task.priority}`,\n      `[EFFORT]: ${task.effort}`,\n      `[DESCRIPTION]:\\n${this.descriptionToTopics(task.description)}`\n    ].join(\"\\n\");\n  }\n\n  private descriptionToTopics(description: string) {\n    let result = \"\";\n    const lines = description.split(\"\\n\").map(l => l.trim()).filter(l => l.length > 0);\n\n    for (let line of lines) {\n      if (line[0] !== \"-\") {\n        line = \"- \" + line;\n      }\n\n      if (![\":\", \";\", \".\"].includes(line[line.length - 1])) {\n        line += \";\"\n      }\n\n      result += line + \"\\n\";\n    }\n\n    return result;\n  }\n\n  importStory(source: string, from: FileType): string {\n    const obj = this.toObjectTree(source);\n    const nextStoryId = this.store.getState().stories.ids.length;\n\n    try {\n      this.importStoryToStore(obj.story, nextStoryId);\n      this.importTasksToStore(obj.story.tasks, nextStoryId)\n\n      return obj.story.name;\n    } catch (e) {\n      throw new Error(\"Invalid JSON content: \" + e.message);\n    }\n  }\n\n  private importStoryToStore(storyObj: any, nextId: StoryId) {\n    try {\n      const story = new Story(nextId, storyObj.name);\n\n      story.title = storyObj.title;\n      story.description = storyObj.description;\n      story.effort = storyObj.effort;\n      story.priority = storyObj.priority;\n      story.description = storyObj.description;\n      story.startDate = this.parseDate(storyObj.startDate);\n      story.handOffDate = this.parseDate(storyObj.handOffDate);\n\n      this.store.dispatch(addStory(story));\n    } catch (e) {\n      throw new Error(\"incomplete story data. \" + e.message);\n    }\n  }\n\n  private parseDate(dateStr: string): Date {\n    if (isNaN(Date.parse(dateStr))) {\n      throw new Error(`could not parse date: '${dateStr}'`);\n    } else {\n      return new Date(dateStr)\n    };\n  }\n\n  private importTasksToStore(tasksArray: any[], storyId: StoryId) {\n    const state = this.store.getState();\n    const newTasks: Task[] = [];\n    let nextId = state.tasks.ids.length;\n\n    for (let taskObj of tasksArray) {\n      try {\n        const task = new Task(nextId);\n\n        task.title = taskObj.title;\n        task.description = taskObj.description;\n        task.effort = taskObj.effort;\n        task.priority = taskObj.priority;\n        task.description = taskObj.description;\n        task.startDate = this.parseDate(taskObj.startDate);\n        task.handOffDate = this.parseDate(taskObj.handOffDate);\n        task.type = taskObj.type;\n        task.area = taskObj.area;\n        task.assignee = taskObj.assignee;\n\n        newTasks.push(task);\n        nextId++;\n      } catch (e) {\n        throw new Error(\"incomplete task data. \" + e.message);\n      }\n    }\n\n    for (let task of newTasks) {\n      this.store.dispatch(addTask(task, storyId));\n    }\n  }\n\n  private toObjectTree(source: string): any {\n    try {\n      return JSON.parse(source);\n    } catch (e) {\n      throw new Error(\"Invalid JSON file.\");\n    }\n  }\n}\n\nexport default new Trader(store);\n","import { combineReducers } from \"redux\";\nimport sprintsReducer from \"./sprints.reducer\";\nimport teamsReducer from \"./teams.reducer\";\nimport teamMembersReducer from \"./team-members.reducer\";\nimport IEntityMap from \"../utils/entity-map.interface\";\nimport { Sprint } from \"../../entities/sprint.entity\";\nimport { TeamMember } from \"../../entities/team-member.entity\";\nimport { Team } from \"../../entities/team.entity\";\nimport IUiState from \"../utils/ui-state.interface\";\nimport uiReducer from \"./ui.reducer\";\nimport storiesReducer from \"./stories.reducer\";\nimport { Story } from \"../../entities/story.entity\";\nimport { Task } from \"../../entities/task.entity\";\nimport tasksReducer from \"./tasks.reducer\";\n\nexport interface IStore {\n  ui: IUiState,\n  // sprints: IEntityMap<Sprint>,\n  // teams: IEntityMap<Team>,\n  // teamMembers: IEntityMap<TeamMember>,\n  stories: IEntityMap<Story>,\n  tasks: IEntityMap<Task>\n}\n\nexport default combineReducers({\n  ui: uiReducer,\n  stories: storiesReducer,\n  tasks: tasksReducer\n  // sprints: sprintsReducer,\n  // teams: teamsReducer,\n  // teamMembers: teamMembersReducer,\n});\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React, { RefObject, KeyboardEvent } from \"react\";\nimport TaskList from \"./TaskList\";\nimport { IStore } from \"../redux/reducers\";\nimport { connect } from \"react-redux\";\nimport ContentEditable, { ContentEditableEvent } from \"react-contenteditable\";\nimport { Button, Tag, Menu, Popover, Position } from \"@blueprintjs/core\";\nimport { Story } from \"../entities/story.entity\";\nimport { TaskId, Task } from \"../entities/task.entity\";\nimport { updateStory } from \"../redux/actions\";\nimport StoryForm from \"./StoryForm\";\nimport { FileType } from \"../services/trader.service\";\n\ninterface Props {\n  selectedStory: Story,\n  tasks: { [key: number]: Task },\n  tasksIds: TaskId[],\n  exportStory: (fileType: FileType) => void,\n  [key: string]: any\n}\n\nclass StoryDetails extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.editableNameElement = React.createRef()\n\n    this.updateAttribute = this.updateAttribute.bind(this);\n  }\n\n  public editableNameElement: RefObject<HTMLDivElement>;\n\n  public updateStoryName(e: ContentEditableEvent) {\n    const name = e.target.value.trim() || \"\";\n    const updated = { ...this.props.selectedStory, name };\n    this.props.dispatch(updateStory(updated));\n  }\n\n  public handleEnterKeyOnStoryName(e: KeyboardEvent<HTMLDivElement>) {\n    const el = this.editableNameElement.current;\n    if ([\"Enter\", \"Escape\"].includes(e.key) && el) {\n      el.blur();\n    }\n  }\n\n  // edit story\n  public updateAttribute(key: string, value: any) {\n    const updated = { ...this.props.selectedStory, [key]: value };\n    this.props.dispatch(updateStory(updated));\n  }\n\n  render() {\n    const { selectedStory } = this.props;\n\n    const exportMenu = (\n      <Menu>\n        <Menu.Item text=\"To JSON file\" onClick={() => this.props.exportStory(FileType.JSON)} />\n        <Menu.Item text=\"To TXT file\" onClick={() => this.props.exportStory(FileType.DTD)} />\n      </Menu>\n    );\n\n    return (\n      <div className=\"story-details\">\n        {\n          selectedStory ?\n            <>\n              <div className=\"story-details__header\">\n                <div className=\"story-details__name\">\n                  <Tag intent=\"primary\" minimal={true}>STORY</Tag>\n\n                  <ContentEditable\n                    innerRef={this.editableNameElement}\n                    onChange={(e) => this.updateStoryName(e)}\n                    onKeyDown={(e) => this.handleEnterKeyOnStoryName(e)}\n                    html={selectedStory.name || \"\"} />\n                </div>\n\n                <div className=\"story-details__controls\">\n                  <Popover content={exportMenu} position={Position.BOTTOM_RIGHT} minimal={true}>\n                    <Button intent=\"none\" text=\"Export\" icon=\"export\" rightIcon=\"caret-down\" />\n                  </Popover>\n                </div>\n              </div>\n\n              <div className=\"story-details__body\">\n                <StoryForm story={selectedStory} update={this.updateAttribute} />\n              </div>\n\n              <div className=\"story-details__stories\">\n                <TaskList story={selectedStory} />\n              </div>\n            </> : null\n        }\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IStore, props: any): Props => {\n  const selectedStoryIndex = state.ui.selectedStory;\n  const selectedStory = state.stories.entities[state.stories.ids[selectedStoryIndex]];\n\n  return {\n    selectedStory,\n    tasks: state.tasks.entities,\n    tasksIds: state.tasks.ids,\n    ...props\n  };\n}\n\nexport default connect(mapStateToProps)(StoryDetails);\n","import { FileType } from \"../services/trader.service\";\n\nconst Extension = {\n  [FileType.JSON]: \"json\",\n  [FileType.DTD]: \"txt\"\n};\n\nexport function download(fileName: string, fileType: FileType, bytes: string) {\n  const blob = new Blob([bytes], { type: \"octet/stream\" });\n  const fullname = `(${fileName}).${Extension[fileType]}`;\n  clickOnVirtualLink(blob, fullname);\n}\n\nfunction clickOnVirtualLink(blob: Blob, filename: string) {\n  const link = document.createElement(\"a\");\n  const url = window.URL.createObjectURL(blob);\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  link.remove();\n  URL.revokeObjectURL(url);\n}\n","import { IconName, Intent } from \"@blueprintjs/core\";\n\nexport default class Notification {\n  constructor(message: string, icon: IconName) {\n    this.message = message || \"\";\n    this.icon = icon;\n    this.intent = \"none\";\n    this.timeout = 3000;\n  }\n\n  message: string;\n  icon?: IconName;\n  intent: Intent;\n  timeout: number;\n}\n","import { Position, Toaster } from \"@blueprintjs/core\";\n\nconst NotifyDock = Toaster.create({\n  className: \"notify-dock\",\n  position: Position.TOP,\n});\n\nexport default NotifyDock;\n","import React from \"react\";\nimport StoryList from \"./StoryList\";\nimport StoryDetails from \"./StoryDetails\";\nimport Trader, { FileType } from \"../services/trader.service\";\nimport { IStore } from \"../redux/reducers\";\nimport { connect } from \"react-redux\";\nimport { download } from \"../services/file.service\";\nimport Notification from \"../entities/notification.entity\";\nimport { Story } from \"../entities/story.entity\";\nimport IEntityMap from \"../redux/utils/entity-map.interface\";\nimport NotifyDock from \"./NotifyDock\";\nimport { setStateClean } from \"../redux/actions\";\n\ninterface Props {\n  selectedStory: number,\n  stories: IEntityMap<Story>,\n  isStateDirty: boolean,\n  [key: string]: any\n}\n\nclass Dashboard extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.exportStory = this.exportStory.bind(this);\n    this.importStory = this.importStory.bind(this);\n  }\n\n  public componentDidMount() {\n    const { isStateDirty } = this.props;\n    window.onbeforeunload = (e: any) => {\n      return \"\";\n    };\n  }\n\n  private notify(notification: Notification) {\n    NotifyDock.show(notification);\n  }\n\n  public exportStory(fileType: FileType) {\n    const storyIndex = this.props.selectedStory;\n    const story = this.props.stories.entities[this.props.stories.ids[storyIndex]];\n    const result = Trader.exportStory(story, fileType);\n\n    this.notify(new Notification(\"Your download will begin shortly.\", \"download\"));\n    setTimeout(() => download(story.name, fileType, result), 1500);\n    this.props.dispatch(setStateClean());\n  }\n\n  public importStory(e: any) {\n    const file: File = e.target.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e: any) => {\n        let notification;\n\n        try {\n          const storyName = Trader.importStory(e.target.result, FileType.JSON);\n          notification = new Notification(`\"${storyName}\" was imported successfully.`, \"tick\")\n        } catch (e) {\n          notification = new Notification(`${e.message}`, \"error\");\n        }\n\n        this.notify(notification);\n      }\n      reader.readAsText(file);\n    }\n  }\n\n  render() {\n    const { stories } = this.props;\n    return (\n      <div className=\"app\">\n        <header>\n          <div className=\"app-title\"> >=pardal<span>v0.0.1</span></div>\n        </header>\n\n        <div className=\"dashboard\">\n          <aside>\n            <StoryList importStory={this.importStory} />\n          </aside>\n\n          {\n            stories && stories.ids && stories.ids.length > 0 ?\n              <main>\n                <StoryDetails exportStory={this.exportStory} />\n              </main>\n              : null\n          }\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IStore, props: any): Props => {\n  return {\n    selectedStory: state.ui.selectedStory,\n    stories: state.stories,\n    isStateDirty: state.ui.isDirty,\n    ...props\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './components/Dashboard';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\n// Styles\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\nimport \"./styles/root.scss\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Dashboard />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}